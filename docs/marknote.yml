swagger: '2.0'
info:
  version: 1.0.0
  title: MarkNote Documentation
  description: A Markdown note taking tool for managing personal information and documentation. It is designed to be connected to a note management API. It implements the react-simplemde-editor.
schemes:
- http
host: 'localhost:8000'
basePath: /marknote
paths:
  /note:
    post:
      summary: Create a note
      description: A request to create a note.
      tags:
      - note
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: title
        in: formData
        description: The title of the new note.
        required: true
        type: string
      - name: content
        in: formData
        description: The content of the new note.
        required: false
        type: string
      - name: containerId
        in: formData
        description: The folder to put the note in.
        required: false
        type: string
      responses:
        200:
          description: The note was created successfully.
          schema:
            $ref: "#/definitions/Note"
        400:
          description: The note could not be created as specified.
        401:
          description: The user is not authenticated.
    get:
      summary: Retrieve all notes
      description: A request to retrieve all notes and filter with query paramters.
      tags:
      - note
      produces:
      - "application/json"
      parameters:
      - name: title
        in: query
        description: The title to search for and filter by.
        required: false
        type: string
      - name: content
        in: query
        description: The content to search for and filter by.
        required: false
        type: string
      responses:
        200:
          description: The notes were retrieved successfully.
          schema:
            notes:
              type: array
              schema:
                $ref: "#/definitions/Note"
  /note/{id}:
    get:
      summary: Retrieve a note
      description: A request to retrieve a note.
      tags:
      - note
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: The ID of the note to retrieve
        required: true
        type: string
      responses:
        200:
          description: The note was retrieved successfully.
          schema:
            type: object
            properties:
              note:
                $ref: "#/definitions/Note"
        401:
          description: The user is not authenticated.
        404:
          description: The note could not be found.
    put:
      summary: Update a note
      description: A request to update a note.
      tags:
      - note
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: The ID of the note to update.
        required: true
        type: string
      - name: title
        in: formData
        description: The new title of the note
        required: false
        type: string
      - name: content
        in: formData
        description: The new content of the note
        required: false
        type: string
      - name: containerId
        in: formData
        description: The new folder of the note
        required: false
        type: string
      responses:
        200:
          description: The note was updated successfully.
          schema:
            $ref: "#/definitions/Note"
        400:
          description: The note could not be updated as specified.
        401:
          description: The user is not authenticated.
        404:
          description: The note could note be found.
    delete:
      summary: Delete a note
      description: A request to delete a note.
      tags:
      - note
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: The ID of the note to delete.
        required: true
        type: string
      responses:
        204:
          description: The note was deleted successfully.
        401:
          description: The user is not authenticated.
        404:
          description: The note could note be found.
  /folder:
    post:
      summary: Create a folder
      description: A request to create a folder.
      tags:
      - folder
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: title
        in: formData
        description: The title of the new folder.
        required: true
        type: string
      - name: containerId
        in: formData
        description: The folder to put the folder in.
        required: false
        type: string
      responses:
        200:
          description: The folder was created successfully.
          schema:
            $ref: "#/definitions/Folder"
        400:
          description: The folder could not be created as specified.
        401:
          description: The user is not authenticated.
  /folder/{id}:
    get:
      summary: Retrieve a folder
      description: A request to retrieve a folder.
      tags:
      - folder
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: The ID of the folder to retrieve
        required: true
        type: string
      responses:
        200:
          description: The folder was retrieved successfully.
          schema:
            type: object
            properties:
              note:
                $ref: "#/definitions/Folder"
        401:
          description: The user is not authenticated.
        404:
          description: The folder could not be found.
    put:
      summary: Update a folder
      description: A request to update a folder.
      tags:
      - folder
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: The ID of the folder to update.
        required: true
        type: string
      - name: title
        in: formData
        description: The new title of the note
        required: false
        type: string
      - name: containerId
        in: formData
        description: The new folder of the note
        required: false
        type: string
      responses:
        200:
          description: The folder was updated successfully.
          schema:
            $ref: "#/definitions/Folder"
        400:
          description: The folder could not be updated as specified.
        401:
          description: The user is not authenticated.
        404:
          description: The folder could note be found.
    delete:
      summary: Delete a folder
      description: A request to delete a folder.
      tags:
      - folder
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: The ID of the folder to delete.
        required: true
        type: string
      responses:
        204:
          description: The folder was deleted successfully.
        401:
          description: The user is not authenticated.
        404:
          description: The folder could note be found.
definitions:
  Note:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      content:
        type: string
      timestamp:
        type: integer
      containerId:
        type: string
  NoteSummary:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      timestamp:
        type: integer
      containerId:
        type: string
  Folder:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      containerId:
        type: string
      notes:
        type: array
        items:
          $ref: "#/definitions/NoteSummary"
      folders:
        type: array
        items:
          $ref: "#/definitions/FolderSummary"
  FolderSummary:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      containerId:
        type: string
